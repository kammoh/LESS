The submission for LESS contains the following:

• Reference_Implementation

A reference implementation of the asymmetric signature LESS as a C11 
library.
The reference implementation library does not provide a main() function, and is
intended to be compiled and linked to a binary.
The required NIST API is present in
Reference_Implementation/include/api.h,
The implementation may either use libkeccak, if installed and available 
in system-wide searched paths (e.g., /usr/local/include for the 
headerfiles and /usr/local/lib for the static library), or employ 
the provided fallback implementation for systems where libkeccak is not 
available. 
If the library is not compiled via the supplied Cmake flow, defining 
SHA_3_LIBKECCAK during compilation enables compilation of the codebase 
against an available libkeccak installation.

• Optimized_Implementation

• Additional_Implementations

An AVX2 optimized implementation of the asymmetric signature LESS.
The library is organized in the same fashion as the reference one.
The implementation may either use libkeccak, if installed and available 
in system-wide searched paths (e.g., /usr/local/include for the 
headerfiles and /usr/local/lib for the static library), or employ 
the provided fallback implementation for systems where libkeccak is not 
available. 
If the library is not compiled via the supplied Cmake flow, defining 
SHA_3_LIBKECCAK during compilation enables compilation of the codebase 
against an available libkeccak installation.

• Utilities

This directory provides Cmake based building facilites to generate
executable files either performing a benchmark of LESS, or
generating the Known Answer Test files in the KAT folder, as well as a script used for parameter generation.

To build the benchmarking binaries, we advise to build-off tree following this
procedure:

1 - Enter Utilities/Benchmarking
2 - create a "build" directory and enter it
3 - type cmake ../ to generate the makefiles
4 - type make to compile the codebase

By default, the optimized implementation will be compiled (note that it provides
compatibility fallbacks if AVX2 ISA extensions are not available).
To select the reference implementation for building, add -DREFERENCE=1 to the
command in step 3.

The KAT_Generation directory is organized in the same fashion as the
Benchmarking one.
The same compilation procedure enacted for the benchmarking binary will generate
all the executable files needed to re-generate the Known Answer Tests files.
Specifically,

1 - Enter Utilities/KAT_Generation
2 - create a "build" directory and enter it
3 - type cmake ../ to generate the makefiles
4 - type make to compile the codebase

By default, the reference implementation will be compiled.
To select the optimized implementation for building, add -DREFERENCE=0 to the
command in step 3.

To run binaries related to categories 3 and 5, you may be in need of enlarging
the maximum available stack size.
This can be achieved via:

ulimit -s <desired_stack_size_in_bytes>

while

ulimit -s unlimited

removes the stack size limitation altogether.


A commodity script generating all KATs is provided: gen_all_kat.sh
It can be run without parameters.
KATs will be generated in the KAT directory

• LESS-2023-xx-yy

The PDF document(s) describing the LESS cryptosystem in detail, according to the latest releases.

• README

This file.
